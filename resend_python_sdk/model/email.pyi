# coding: utf-8

"""
    Resend

    Resend is the email platform for developers.

    The version of the OpenAPI document: 1.1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from resend_python_sdk import schemas  # noqa: F401


class Email(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            object = schemas.StrSchema
            id = schemas.StrSchema
        
            @staticmethod
            def to() -> typing.Type['EmailTo']:
                return EmailTo
            _from = schemas.StrSchema
            created_at = schemas.DateTimeSchema
            subject = schemas.StrSchema
            html = schemas.StrSchema
            text = schemas.StrSchema
        
            @staticmethod
            def bcc() -> typing.Type['EmailBcc']:
                return EmailBcc
        
            @staticmethod
            def cc() -> typing.Type['EmailCc']:
                return EmailCc
        
            @staticmethod
            def reply_to() -> typing.Type['EmailReplyTo']:
                return EmailReplyTo
            last_event = schemas.StrSchema
            __annotations__ = {
                "object": object,
                "id": id,
                "to": to,
                "from": _from,
                "created_at": created_at,
                "subject": subject,
                "html": html,
                "text": text,
                "bcc": bcc,
                "cc": cc,
                "reply_to": reply_to,
                "last_event": last_event,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["to"]) -> 'EmailTo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["from"]) -> MetaOapg.properties._from: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subject"]) -> MetaOapg.properties.subject: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["html"]) -> MetaOapg.properties.html: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["text"]) -> MetaOapg.properties.text: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bcc"]) -> 'EmailBcc': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cc"]) -> 'EmailCc': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reply_to"]) -> 'EmailReplyTo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_event"]) -> MetaOapg.properties.last_event: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["object", "id", "to", "from", "created_at", "subject", "html", "text", "bcc", "cc", "reply_to", "last_event", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["object"]) -> typing.Union[MetaOapg.properties.object, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["to"]) -> typing.Union['EmailTo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["from"]) -> typing.Union[MetaOapg.properties._from, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subject"]) -> typing.Union[MetaOapg.properties.subject, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["html"]) -> typing.Union[MetaOapg.properties.html, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["text"]) -> typing.Union[MetaOapg.properties.text, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bcc"]) -> typing.Union['EmailBcc', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cc"]) -> typing.Union['EmailCc', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reply_to"]) -> typing.Union['EmailReplyTo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_event"]) -> typing.Union[MetaOapg.properties.last_event, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["object", "id", "to", "from", "created_at", "subject", "html", "text", "bcc", "cc", "reply_to", "last_event", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        object: typing.Union[MetaOapg.properties.object, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        to: typing.Union['EmailTo', schemas.Unset] = schemas.unset,
        created_at: typing.Union[MetaOapg.properties.created_at, str, datetime, schemas.Unset] = schemas.unset,
        subject: typing.Union[MetaOapg.properties.subject, str, schemas.Unset] = schemas.unset,
        html: typing.Union[MetaOapg.properties.html, str, schemas.Unset] = schemas.unset,
        text: typing.Union[MetaOapg.properties.text, str, schemas.Unset] = schemas.unset,
        bcc: typing.Union['EmailBcc', schemas.Unset] = schemas.unset,
        cc: typing.Union['EmailCc', schemas.Unset] = schemas.unset,
        reply_to: typing.Union['EmailReplyTo', schemas.Unset] = schemas.unset,
        last_event: typing.Union[MetaOapg.properties.last_event, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Email':
        return super().__new__(
            cls,
            *args,
            object=object,
            id=id,
            to=to,
            created_at=created_at,
            subject=subject,
            html=html,
            text=text,
            bcc=bcc,
            cc=cc,
            reply_to=reply_to,
            last_event=last_event,
            _configuration=_configuration,
            **kwargs,
        )

from resend_python_sdk.model.email_bcc import EmailBcc
from resend_python_sdk.model.email_cc import EmailCc
from resend_python_sdk.model.email_reply_to import EmailReplyTo
from resend_python_sdk.model.email_to import EmailTo
